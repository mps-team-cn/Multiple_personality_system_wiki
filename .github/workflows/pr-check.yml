name: PR 质量检查

on:
  pull_request:
    paths:
      - 'docs/entries/*.md'
      - 'docs/**/*.md'

permissions:
  contents: read
  pull-requests: write  # 允许评论 PR

jobs:
  check-quality:
    name: 检查词条质量
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: 设置 Python
        uses: actions/setup-python@v5
        # with:
          # python-version: '3.11'

      - name: 安装依赖
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: 检查链接规范
        id: check_links
        continue-on-error: true
        run: |
          echo "🔗 检查链接规范..."
          echo ""

          # 检查修改的 Markdown 文件
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.md$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "✅ 没有 Markdown 文件变更"
            exit 0
          fi

          echo "📝 检查以下文件："
          echo "$CHANGED_FILES"
          echo ""

          # 运行链接检查
          FAILED=0
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              echo "检查: $file"
              if ! python3 tools/check_links.py "$file"; then
                FAILED=1
              fi
            fi
          done

          if [ $FAILED -eq 1 ]; then
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ 链接检查失败！"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "📋 链接规范："
            echo "  ✅ 词条间链接：直接使用文件名"
            echo "     示例：[DID](DID.md)"
            echo ""
            echo "  ✅ 词条→其他目录：使用 ../ 相对路径"
            echo "     示例：[贡献指南](../contributing/index.md)"
            echo ""
            echo "  ✅ 其他目录→词条：使用 ../entries/ 路径"
            echo "     示例：[DID](../entries/DID.md)"
            echo ""
            echo "  ❌ 禁止：绝对路径"
            echo "     错误示例：[DID](/docs/entries/DID.md)"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "LINK_CHECK_FAILED=1" >> $GITHUB_ENV
            exit 1
          fi

          echo ""
          echo "✅ 所有链接符合规范"
          echo "LINK_CHECK_FAILED=0" >> $GITHUB_ENV

      - name: 检查 Frontmatter
        id: check_frontmatter
        continue-on-error: true
        run: |
          echo "📋 检查 Frontmatter 格式..."
          echo ""

          # 获取变更的词条文件
          CHANGED_ENTRIES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^docs/entries/.*\.md$' || true)

          if [ -z "$CHANGED_ENTRIES" ]; then
            echo "✅ 没有词条文件变更"
            echo "FRONTMATTER_CHECK_FAILED=0" >> $GITHUB_ENV
            exit 0
          fi

          echo "📝 检查以下词条文件："
          echo "$CHANGED_ENTRIES" | while read file; do
            echo "  - $file"
          done
          echo ""

          # 创建临时目录存放需要检查的文件
          TEMP_DIR=$(mktemp -d)
          mkdir -p "$TEMP_DIR/docs/entries"

          # 复制变更的文件到临时目录
          echo "$CHANGED_ENTRIES" | while read file; do
            if [ -f "$file" ]; then
              cp "$file" "$TEMP_DIR/$file"
            fi
          done

          # 使用 Python 脚本检查 Frontmatter
          if python3 tools/check_frontmatter.py --path "$TEMP_DIR/docs/entries"; then
            echo ""
            echo "✅ 所有 Frontmatter 格式正确"
            echo "FRONTMATTER_CHECK_FAILED=0" >> $GITHUB_ENV
            rm -rf "$TEMP_DIR"
            exit 0
          else
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ Frontmatter 检查失败！"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "📋 必需字段："
            echo "  - title: 词条标题"
            echo "  - topic: 词条主题（用于 Guide 映射）"
            echo "  - tags: 分类标签列表"
            echo "  - updated: 最后更新时间（CI 会在合并后自动更新）"
            echo ""
            echo "📝 注意事项："
            echo "  • updated 字段必须存在，但会在合并后自动更新"
            echo "  • tags 应使用 YAML 列表格式"
            echo "  • 参考模板：docs/TEMPLATE_ENTRY.md"
            echo ""
            echo "📚 主题与 Guide 映射请参考："
            echo "    AGENTS.md#📚-词条主题与-guide-映射表"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "FRONTMATTER_CHECK_FAILED=1" >> $GITHUB_ENV
            rm -rf "$TEMP_DIR"
            exit 1
          fi

      - name: 检查标签规范（Tagging Standard v2.0）
        id: check_tags
        continue-on-error: true
        run: |
          echo "🏷️ 检查标签规范..."

          CHANGED_ENTRIES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^docs/entries/.*\.md$' || true)

          if [ -z "$CHANGED_ENTRIES" ]; then
            echo "✅ 没有词条文件变更"
            echo "TAG_CHECK_FAILED=0" >> $GITHUB_ENV
            exit 0
          fi

          FAILED=0
          for file in $CHANGED_ENTRIES; do
            if [ -f "$file" ]; then
              echo "检查: $file"
              if ! python3 tools/check_tags.py "$file"; then
                FAILED=1
              fi
            fi
          done

          if [ $FAILED -eq 1 ]; then
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ 标签规范检查失败！"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "📋 规则摘要："
            echo "  - 至少 1 个合法前缀；总数 ≤ 5"
            echo "  - 允许前缀：dx/sx/tx/scale/theory/ops/role/community/guide/history/misuse/bio/sleep/dev/culture/meta"
            echo "  - 禁止别名；禁止空格、句号、英文半角括号；正则 ^[a-z]+:[^\\s()]+$"
            echo "  - 名称部分不得与页面 title 完全相同"
            echo ""
            echo "📖 参考：docs/contributing/tagging-standard.md"
            echo "TAG_CHECK_FAILED=1" >> $GITHUB_ENV
            exit 1
          fi

          echo "✅ 标签规范检查通过"
          echo "TAG_CHECK_FAILED=0" >> $GITHUB_ENV

      - name: 检查结果摘要
        if: always()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 PR 检查完成"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

          # 检查是否有失败的检查
          LINK_FAILED="${LINK_CHECK_FAILED:-0}"
          FRONTMATTER_FAILED="${FRONTMATTER_CHECK_FAILED:-0}"
          TAG_FAILED="${TAG_CHECK_FAILED:-0}"

          if [ "$LINK_FAILED" = "1" ] || [ "$FRONTMATTER_FAILED" = "1" ] || [ "$TAG_FAILED" = "1" ]; then
            echo "❌ 检查失败，请修复以下问题后重新提交："
            echo ""
            if [ "$LINK_FAILED" = "1" ]; then
              echo "  ❌ 链接检查失败"
            fi
            if [ "$FRONTMATTER_FAILED" = "1" ]; then
              echo "  ❌ Frontmatter 检查失败"
            fi
            if [ "$TAG_FAILED" = "1" ]; then
              echo "  ❌ 标签规范检查失败"
            fi
            echo ""
            echo "📖 参考文档："
            echo "  - 词条模板：docs/TEMPLATE_ENTRY.md"
            echo "  - 贡献指南：docs/contributing/"
            echo "  - 标签规范：docs/contributing/tagging-standard.md"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            exit 1
          else
            echo "✅ 所有检查通过，可以合并"
            echo ""
            echo "💡 提示："
            echo "  - 时间戳会在合并到 main 后自动更新"
            echo "  - 格式问题会在合并后自动修复"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          fi
